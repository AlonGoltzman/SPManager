package com.sharedpreferencesmanager.generated;

import android.content.Context;
import android.content.SharedPreferences;
import android.support.annotation.NonNull;
import android.util.Log;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

public class SPManager {


    private static final String TAG = SPManager.class.getSimpleName();

    private final String[] listeners = new String[]{
            %$PLACEHOLDER$%
    };

    private SharedPreferences mPrefs;
    private List<UpdateListener> updateListeners;

    //==========================================================================
    private static SPManager mInstance;

    public static SPManager getInstance(SharedPreferences sp) {
        return mInstance == null ? new SPManager(sp) : mInstance;
    }

    private SPManager(SharedPreferences sp) {
        mInstance = this;
        mPrefs = sp;
        updateListeners = new LinkedList<>();
        createListeners();
    }
    //==========================================================================

    /**
     * Sets a new value in the shared preferences.
     * Notifies all listeners for this key that the value is updated to a new one.
     *
     * @param context
     *         - the context to be passed to the listener in order for it to be able to perform actions on UI or send a broadcast.
     * @param key
     *         - the SharedPreferences key.
     * @param value
     *         - the value to be updated.
     *
     * @return - the instance in order to create an ability to update multiple keys in one go.
     */
    @SuppressWarnings("unchecked")
    public SPManager update(Context context, String key, Object value) {
        SharedPreferences.Editor editor = mPrefs.edit();
        if (value instanceof String)
            editor.putString(key, value.toString());
        else if (value instanceof Float)
            editor.putFloat(key, Float.parseFloat(value.toString()));
        else if (value instanceof Boolean)
            editor.putBoolean(key, Boolean.parseBoolean(value.toString()));
        else if (value instanceof Long)
            editor.putLong(key, Long.parseLong(value.toString()));
        else if (value instanceof Integer)
            editor.putInt(key, Integer.parseInt(value.toString()));
        else if (value instanceof Set) {
            if (((Set) value).size() > 0) {
                Iterator<?> iter = ((Set) value).iterator();
                Object iterValue = iter.next();
                if (iterValue instanceof String)
                    editor.putStringSet(key, (Set<String>) value);
            } else
                throw new IllegalArgumentException("Set passed in with no values.");
        } else
            throw new IllegalArgumentException("Only String, Float, Boolean, Serializable & Integer types are allowed.");
        editor.apply();

        for (UpdateListener listener : updateListeners)
            for (int i = 0; i < listener.getUpdateMethodsKeys().size(); i++) {
                String str = listener.getUpdateMethodsKeys().get(i);
                String[] keys = str.replace("[", "").replace("]", "").split(",");
                if (Arrays.binarySearch(keys, key) > 0 || (keys.length == 1 && keys[0].equals("*"))) {
                    String methodName = listener.getUpdateMethods().get(i);
                    Class<?> clazz = listener.getListenerClass();
                    Object clazzObj = listener.getListenerObj();
                    try {
                        Method method = clazz.getMethod(methodName, Context.class, String.class, Object.class);
                        method.invoke(clazzObj, context, key, value);
                    } catch (NoSuchMethodException | IllegalAccessException e ){
                        e.printStackTrace();
                    } catch (InvocationTargetException e1){
                        Log.e(TAG, "One of the UpdateTarget methods has an internal error, meaning something isn't right in the code you wrote.\nClass name: " + clazzObj.getClass().getCanonicalName() + ", method: " + methodName);
                        Log.wtf(TAG, "The error;", e1);
                    }
                }
            }
        return this;
    }

    /**
     * Gets a value for a key.
     *
     * @param key
     *         - the SharedPreferences key.
     *
     * @return - the value associated with the key.
     */
    public Object get(String key) {
        return mPrefs.getAll().get(key);
    }

    private void createListeners() {
      try {
            for (int i = 0; i < listeners.length; i += 3) {
                String className = listeners[i];
                String methodName = listeners[i + 1];
                String listenerKeys = listeners[i + 2];

                Class<?> clazz = Class.forName(className);
                Object obj = clazz.newInstance();

                boolean foundListener = false;
                for (UpdateListener listener : updateListeners)
                    if (listener.getListenerClass().isInstance(obj)) {
                        listener.addNewUpdateMethod(methodName, listenerKeys);
                        foundListener = true;
                        break;
                    }
                if (foundListener)
                    continue;
                UpdateListener newListener = new UpdateListener(obj, clazz);
                newListener.addNewUpdateMethod(methodName, listenerKeys);
                updateListeners.add(newListener);
            }
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e){
            e.printStackTrace();
        }
    }

    private class UpdateListener {

        private Object listenerObj;
        private Class<?> listenerClass;
        private List<String> updateMethods;
        private List<String> updateMethodsKeys;

        public UpdateListener(Object listenerObj, Class<?> listenerClass) {
            this.listenerObj = listenerObj;
            this.listenerClass = listenerClass;
            updateMethods = new LinkedList<>();
            updateMethodsKeys = new LinkedList<>();
        }

        public UpdateListener(Object listenerObj, Class<?> listenerClass, List<String> updateMethods, List<String> updateMethodsKeys) {
            this.listenerObj = listenerObj;
            this.listenerClass = listenerClass;
            this.updateMethods = updateMethods;
            this.updateMethodsKeys = updateMethodsKeys;
        }

        public Object getListenerObj() {
            return listenerObj;
        }

        public Class<?> getListenerClass() {
            return listenerClass;
        }

        public List<String> getUpdateMethods() {
            return updateMethods;
        }

        public List<String> getUpdateMethodsKeys() {
            return updateMethodsKeys;
        }

        public void addNewUpdateMethod(@NonNull String methodName, @NonNull String keys) {
            updateMethods.add(methodName);
            updateMethodsKeys.add(keys);
        }

    }

}
